# Email Configuration for Contact Form
# Copy this file to .env.local and fill in your SMTP credentials

# For Gmail:
# 1. Go to https://myaccount.google.com/apppasswords
# 2. Generate an app-specific password
# 3. Use that password here (not your regular Gmail password)

SMTP_USER=wagginmeals@gmail.com
SMTP_PASS=your-app-specific-password-here
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587

# Alternative: Use EMAIL_USER and EMAIL_PASS (same as SMTP_USER/PASS)
# EMAIL_USER=wagginmeals@gmail.com
# EMAIL_PASS=your-app-specific-password-here

# ===============================================
# Transactional Email Service (Resend)
# ===============================================
# For order confirmations and notifications
# Get API key from: https://resend.com/api-keys
RESEND_API_KEY=your_resend_api_key_here
EMAIL_FROM=Waggin Meals <orders@wagginmeals.com>
ADMIN_EMAIL=admin@wagginmeals.com

# Site URL (for links in emails)
NEXT_PUBLIC_SITE_URL=https://wagginmeals.com

# ===============================================
# GoHighLevel CRM Integration
# ===============================================
# Get these credentials from your GoHighLevel account:
# 1. Login to GoHighLevel (https://app.gohighlevel.com)
# 2. Go to Settings > API Keys to get your API key
# 3. Go to Settings > Calendars to get your Calendar ID
# 4. Go to Settings > Business Profile to get your Location ID
# 5. Set GHL_ENABLED=true when you're ready to activate the integration

# Enable/Disable GoHighLevel integration
# Set to 'true' to activate, 'false' or leave unset to use placeholder mode
GHL_ENABLED=false

# GoHighLevel API Key
# Found in: Settings > API Keys
GHL_API_KEY=your_gohighlevel_api_key_here

# GoHighLevel Calendar ID
# Found in: Settings > Calendars
GHL_CALENDAR_ID=your_calendar_id_here

# GoHighLevel Location ID
# Found in: Settings > Business Profile
GHL_LOCATION_ID=your_location_id_here

# ===============================================
# Payment Processing (E-Commerce)
# ===============================================
# Get Authorize.net credentials from your merchant account:
# 1. Login to https://account.authorize.net
# 2. Go to Account > Settings > API Credentials & Keys
# 3. Generate API Login ID and Transaction Key
# 4. Use sandbox credentials for testing first

# PRIMARY Payment Processor - Authorize.net
AUTHORIZENET_API_LOGIN_ID=your_authorize_net_api_login_id_here
AUTHORIZENET_TRANSACTION_KEY=your_authorize_net_transaction_key_here
AUTHORIZENET_ENVIRONMENT=sandbox  # Change to 'production' when live

# BACKUP Payment Processor - QuickBooks
# Get these from QuickBooks Developer Portal when ready
QUICKBOOKS_CLIENT_ID=your_quickbooks_client_id_here
QUICKBOOKS_CLIENT_SECRET=your_quickbooks_client_secret_here
QUICKBOOKS_ENVIRONMENT=sandbox  # Change to 'production' when live
QUICKBOOKS_REDIRECT_URI=https://yoursite.com/api/quickbooks/callback

# ===============================================
# Supabase Database & Admin CMS
# ===============================================
# Get these from your Supabase project settings:
# 1. Go to https://supabase.com/dashboard
# 2. Select your project
# 3. Go to Settings > API
# 4. Copy the Project URL and both API keys

NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url_here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_here

# Admin Panel Credentials
# Set your own secure username and password for the admin panel
ADMIN_USERNAME=admin
ADMIN_PASSWORD=change_this_secure_password

# Session Secret (generate a random 32+ character string)
# You can use: openssl rand -base64 32
SESSION_SECRET=your_random_session_secret_here

# Customer Authentication JWT Secret
# Generate with: openssl rand -base64 32
CUSTOMER_JWT_SECRET=your_customer_jwt_secret_here

# ===============================================
# GoHighLevel Webhooks (Subscription System)
# ===============================================
# Get these webhook URLs from GHL after importing the snapshot:
# 1. Go to Workflows in GoHighLevel
# 2. Find "Subscription Payment Updated" workflow
# 3. Copy the webhook URL from the trigger
# 4. Find "Subscription Payment Failed" workflow
# 5. Copy the webhook URL from the trigger

GHL_WEBHOOK_PAYMENT_UPDATED=https://services.leadconnectorhq.com/hooks/your_webhook_id_here
GHL_WEBHOOK_PAYMENT_FAILED=https://services.leadconnectorhq.com/hooks/your_webhook_id_here

# ===============================================
# Cron Job Security
# ===============================================
# Secret for securing the subscription billing cron job
# Generate with: openssl rand -hex 32
CRON_SECRET=your_random_cron_secret_here

# ===============================================
# Application URLs
# ===============================================
# Base URL for the application (used in emails and redirects)
NEXT_PUBLIC_BASE_URL=http://localhost:3000  # Change to https://wagginmeals.com in production
